
#----    Good night set status begin
#
- alias: 'Good Night - set status'
  trigger:
    platform: state
    entity_id: sensor.lr_tv_status      #this is the lr room tv uses command_line -lr tv status
    from: '1'
    to: '0'
  condition:
    condition: time
    after: '21:30:00'
  action:
    - service: homeassistant.turn_on
      entity_id: input_boolean.night_mode

#----    Good night set status begin
#
- alias: 'Not Good Night - set status'
  trigger:
    platform: state
    entity_id: sensor.lr_tv_status      #this is the lr room tv uses command_line -lr tv status
    from: '0'
    to: '1'
  condition:
    condition: time
    after: '21:30:00'
  action:
    - service: homeassistant.turn_off
      entity_id: input_boolean.night_mode

#Night mode on -- close patio shade

- alias: 'Night mode activated'
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    from: 'off'
    to: 'on'
  action:
    # - service: switch.turn_on
    #   entity_id:
    #   # - switch.br_overhead
    #   - switch.melodie_nightstand_
    - service: switch.turn_off
      entity_id:
      - switch.somfy
    - service: notify.ios_michaels_iphone
      data:
        message: "Good Night!"
        data:
          push:
            sound: "US-EN-Alexa-Good-Night.wav"

#Night mode on for 2 minutes turn lights off
      
- alias: 'night mode activated '
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    from: 'off'
    to: 'on'
    for:
      minutes: 2
  action:
    #- service: switch.turn_off
    #   entity_id:
    #   - switch.lr_ceiling_fan
    #   - switch.lr_light
    #   - switch.lr_switch
    #   - switch.dendresser
    # - service: light.turn_off
    #   entity_id:
    #   - light.lr_oh
    - service: switch.turn_off
      data_template:
        entity_id: >-
          {%- set comma = joiner(', ') -%}
          {{- comma() -}}
          {{- "switch.dummy" -}}
          {%- for x in states.switch if x.state == 'on' if x.attributes.occupancy_controlled == 'on' if x.attributes.location != 'master' if x.attributes.location != 'wc' if x.attributes.location != 'masterbath'  -%}
            {{- comma() -}}
            {{- x.entity_id -}}
          {%- endfor -%}
    - service: light.turn_off
      data_template:
        entity_id: >-
          {%- set comma = joiner(', ') -%}
          {{- comma() -}}
          {{- "light.dummy" -}}
          {%- for x in states.light if x.state == 'on' if x.attributes.occupancy_controlled == 'on' if x.attributes.location != 'master' if x.attributes.location != 'wc' if x.attributes.location != 'masterbath'   -%}
            {{- comma() -}}
            {{- x.entity_id -}}
          {%- endfor -%}
 
 
 #Night mode on for 30  minutes transition watchdog turned on
- alias: 'enable morning transition watchdog'
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    from: 'off'
    to: 'on'
    for:
      minutes: 30
  action:
    - service: homeassistant.turn_on
      entity_id: automation.switch_off_night_mode_br_oh_trigger
      
      
#Turn on WC motion based lighting for night mode

- alias: 'Night Mode WC motion on'
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    from: 'off'
    to: 'on'
  action:
    - service: homeassistant.turn_on
      entity_id: automation.wc_light_on_with_motion

- alias: 'turn off wax warmers'
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    from: 'off'
    to: 'on'
  action:
    - service: switch.turn_off
      entity_id:
      - group.wax_warmers
      
      

- alias: 'Night mode activated Melodie'
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: device_tracker.michaels_iphone
    state: 'not_home'
  action:
    - service: switch.turn_on
      entity_id:
      - switch.br_shower
